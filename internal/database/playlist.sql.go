// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: playlist.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getPlaylist = `-- name: GetPlaylist :many
SELECT id, name, description FROM playlists
`

func (q *Queries) GetPlaylist(ctx context.Context) ([]Playlist, error) {
	rows, err := q.db.QueryContext(ctx, getPlaylist)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Playlist
	for rows.Next() {
		var i Playlist
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlaylistIdByName = `-- name: GetPlaylistIdByName :one
SELECT name FROM playlists
WHERE $1=id
`

func (q *Queries) GetPlaylistIdByName(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getPlaylistIdByName, id)
	var name string
	err := row.Scan(&name)
	return name, err
}
