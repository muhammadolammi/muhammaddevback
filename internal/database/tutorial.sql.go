// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tutorial.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const deleteTutorial = `-- name: DeleteTutorial :exec
DELETE  FROM tutorials
 WHERE id = $1
`

func (q *Queries) DeleteTutorial(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTutorial, id)
	return err
}

const getPlaylistTutorials = `-- name: GetPlaylistTutorials :many
SELECT id, title, tutorial_url, description, youtube_link, playlist_id, thumbnail FROM tutorials
WHERE $1=playlist_id
`

func (q *Queries) GetPlaylistTutorials(ctx context.Context, playlistID uuid.UUID) ([]Tutorial, error) {
	rows, err := q.db.QueryContext(ctx, getPlaylistTutorials, playlistID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tutorial
	for rows.Next() {
		var i Tutorial
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.TutorialUrl,
			&i.Description,
			&i.YoutubeLink,
			&i.PlaylistID,
			&i.Thumbnail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTutorial = `-- name: GetTutorial :one
SELECT id, title, tutorial_url, description, youtube_link, playlist_id, thumbnail FROM tutorials
WHERE $1=id
`

func (q *Queries) GetTutorial(ctx context.Context, id uuid.UUID) (Tutorial, error) {
	row := q.db.QueryRowContext(ctx, getTutorial, id)
	var i Tutorial
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.TutorialUrl,
		&i.Description,
		&i.YoutubeLink,
		&i.PlaylistID,
		&i.Thumbnail,
	)
	return i, err
}

const getTutorialWithId = `-- name: GetTutorialWithId :one
SELECT id, title, tutorial_url, description, youtube_link, playlist_id, thumbnail FROM tutorials WHERE id = $1
`

func (q *Queries) GetTutorialWithId(ctx context.Context, id uuid.UUID) (Tutorial, error) {
	row := q.db.QueryRowContext(ctx, getTutorialWithId, id)
	var i Tutorial
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.TutorialUrl,
		&i.Description,
		&i.YoutubeLink,
		&i.PlaylistID,
		&i.Thumbnail,
	)
	return i, err
}

const getTutorialWithTitle = `-- name: GetTutorialWithTitle :one
SELECT id, title, tutorial_url, description, youtube_link, playlist_id, thumbnail FROM tutorials WHERE title = $1
`

func (q *Queries) GetTutorialWithTitle(ctx context.Context, title string) (Tutorial, error) {
	row := q.db.QueryRowContext(ctx, getTutorialWithTitle, title)
	var i Tutorial
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.TutorialUrl,
		&i.Description,
		&i.YoutubeLink,
		&i.PlaylistID,
		&i.Thumbnail,
	)
	return i, err
}

const getTutorials = `-- name: GetTutorials :many
SELECT id, title, tutorial_url, description, youtube_link, playlist_id, thumbnail FROM tutorials
`

func (q *Queries) GetTutorials(ctx context.Context) ([]Tutorial, error) {
	rows, err := q.db.QueryContext(ctx, getTutorials)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tutorial
	for rows.Next() {
		var i Tutorial
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.TutorialUrl,
			&i.Description,
			&i.YoutubeLink,
			&i.PlaylistID,
			&i.Thumbnail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const postTutorial = `-- name: PostTutorial :one
INSERT INTO tutorials (

title,
tutorial_url,
description ,
youtube_link,
playlist_id
)
VALUES ($1, $2, $3 , $4, $5)
RETURNING id, title, tutorial_url, description, youtube_link, playlist_id, thumbnail
`

type PostTutorialParams struct {
	Title       string
	TutorialUrl string
	Description string
	YoutubeLink string
	PlaylistID  uuid.UUID
}

func (q *Queries) PostTutorial(ctx context.Context, arg PostTutorialParams) (Tutorial, error) {
	row := q.db.QueryRowContext(ctx, postTutorial,
		arg.Title,
		arg.TutorialUrl,
		arg.Description,
		arg.YoutubeLink,
		arg.PlaylistID,
	)
	var i Tutorial
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.TutorialUrl,
		&i.Description,
		&i.YoutubeLink,
		&i.PlaylistID,
		&i.Thumbnail,
	)
	return i, err
}

const updateTutorial = `-- name: UpdateTutorial :one
UPDATE tutorials
SET title = $1, tutorial_url=$2, description=$3, youtube_link=$4,  thumbnail = $5,  playlist_id=$6
WHERE id = $7
RETURNING id, title, tutorial_url, description, youtube_link, playlist_id, thumbnail
`

type UpdateTutorialParams struct {
	Title       string
	TutorialUrl string
	Description string
	YoutubeLink string
	Thumbnail   sql.NullString
	PlaylistID  uuid.UUID
	ID          uuid.UUID
}

func (q *Queries) UpdateTutorial(ctx context.Context, arg UpdateTutorialParams) (Tutorial, error) {
	row := q.db.QueryRowContext(ctx, updateTutorial,
		arg.Title,
		arg.TutorialUrl,
		arg.Description,
		arg.YoutubeLink,
		arg.Thumbnail,
		arg.PlaylistID,
		arg.ID,
	)
	var i Tutorial
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.TutorialUrl,
		&i.Description,
		&i.YoutubeLink,
		&i.PlaylistID,
		&i.Thumbnail,
	)
	return i, err
}
