// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: tutorial.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getPlaylistTutorials = `-- name: GetPlaylistTutorials :many
SELECT id, title, tutorial_url, description, youtube_link, playlist_id FROM tutorials
WHERE $1=playlist_id
`

func (q *Queries) GetPlaylistTutorials(ctx context.Context, playlistID uuid.UUID) ([]Tutorial, error) {
	rows, err := q.db.QueryContext(ctx, getPlaylistTutorials, playlistID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tutorial
	for rows.Next() {
		var i Tutorial
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.TutorialUrl,
			&i.Description,
			&i.YoutubeLink,
			&i.PlaylistID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTutorial = `-- name: GetTutorial :one
SELECT id, title, tutorial_url, description, youtube_link, playlist_id FROM tutorials
WHERE $1=title
`

func (q *Queries) GetTutorial(ctx context.Context, title string) (Tutorial, error) {
	row := q.db.QueryRowContext(ctx, getTutorial, title)
	var i Tutorial
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.TutorialUrl,
		&i.Description,
		&i.YoutubeLink,
		&i.PlaylistID,
	)
	return i, err
}

const getTutorials = `-- name: GetTutorials :many
SELECT id, title, tutorial_url, description, youtube_link, playlist_id FROM tutorials
`

func (q *Queries) GetTutorials(ctx context.Context) ([]Tutorial, error) {
	rows, err := q.db.QueryContext(ctx, getTutorials)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tutorial
	for rows.Next() {
		var i Tutorial
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.TutorialUrl,
			&i.Description,
			&i.YoutubeLink,
			&i.PlaylistID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
